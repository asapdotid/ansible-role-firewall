- name: FIREWALLD | Start and enable firewalld
  ansible.builtin.service:
    name: "{{ _firewall_name }}"
    enabled: yes
    state: started
  tags:
    - firewall
    - firewall_config

- name: FIREWALL | Get actual firewalld default zone
  ansible.builtin.command: /bin/firewall-cmd --get-default-zone
  register: default_zone
  changed_when: false
  tags:
    - firewalld
    - firewalld_config

- name: FIREWALL | Set firewalld default zone
  ansible.builtin.command: /bin/firewall-cmd --set-default-zone={{ firewalld_default_zone }}
  register: result
  when: default_zone.stdout != firewalld_default_zone
  changed_when: result.stdout == "success"
  tags:
    - firewalld
    - firewalld_config

- name: FIREWALL | Set firewalld zone interfaces
  ansible.builtin.shell: |
    if [[ "$(/bin/firewall-cmd --get-zone-of-interface={{ item.1 }})" != "{{ item.0.name }}" ]]
    then
      /bin/firewall-cmd --zone={{ item.0.name }} --change-interface={{ item.1 }} --permanent && echo "changed"
    fi
  with_subelements:
    - "{{ firewalld_zone_interfaces }}"
    - interfaces
  register: shell_result
  changed_when: shell_result.stdout | join('') is search('changed')
  notify: restart firewalld
  tags:
    - firewalld
    - firewalld_config

- name: FIREWALLD | Open TCP ports in firewalld
  ansible.posix.firewalld:
    permanent: "{{ item.permanent | default('yes') }}"
    state: enabled
    port: "{{ item.port | default(item) }}/tcp"
    zone: "{{ item.zone | default(omit) }}"
  with_items: "{{ firewalld_allowed_tcp_ports }}"
  notify: restart firewalld
  tags:
    - firewall
    - firewall_config

- name: FIREWALLD | Open UDP ports in firewalld
  ansible.posix.firewalld:
    permanent: "{{ item.permanent | default('yes') }}"
    state: enabled
    port: "{{ item.port | default(item) }}/udp"
    zone: "{{ item.zone | default(omit) }}"
  with_items: "{{ firewalld_allowed_udp_ports }}"
  notify: restart firewalld
  tags:
    - firewall
    - firewall_config

- name: FIREWALLD | Configure NAT rules
  ansible.posix.firewalld:
    state: enabled
    permanent: yes
    zone: "{{ item.zone | default(omit) }}"
    rich_rule: rule family={{ item.family | default('ipv4') }} forward-port port={{ item.original_port }} protocol={{ item.protocol }} to-port={{ item.translated_port }}
  with_items: "{{ firewalld_nat_rules }}"
  notify: restart firewalld
  tags:
    - firewall
    - firewall_config

- name: FIREWALLD | Configure rich rules
  ansible.posix.firewalld:
    state: enabled
    permanent: yes
    zone: "{{ item.zone | default(omit) }}"
    rich_rule: rule family={{ item.family | default('ipv4') }} port port={{ item.dest_port }} protocol={{ item.protocol }} source address={{ item.source }} accept
  with_items: "{{ firewalld_rich_rules }}"
  tags:
    - firewall
    - firewall_config

- name: FIREWALLD | Configure additional firewalld rules
  ansible.posix.firewalld:
    immediate: "{{ item.immediate | default(omit) }}"
    interface: "{{ item.interface | default(omit) }}"
    masquerade: "{{ item.masquerade | default(omit) }}"
    permanent: "{{ item.permanent | default('yes') }}"
    port: "{{ item.port ~ '/' ~ item.protocol if (item.port is defined and item.protocol is defined) else omit }}"
    rich_rule: "{{ item.rich_rule | default(omit) }}"
    service: "{{ item.service | default(omit) }}"
    source: "{{ item.source | default(omit) }}"
    state: "{{ item.state | default('enabled') }}"
    timeout: "{{ item.timeout | default(omit) }}"
    zone: "{{ item.zone | default(omit) }}"
  with_items: "{{ firewalld_rules }}"
  notify: restart firewalld
  tags:
    - firewall
    - firewall_config

- name: FIREWALL | Ansible replace AllowZoneDrifting in firewalld config
  ansible.builtin.replace:
    path: /etc/firewalld/firewalld.conf
    regexp: '(\s+)AllowZoneDrifting=yes(\s+.*)?$'
    replace: '\nAllowZoneDrifting=no\2'

- name: FIREWALL | Reload firewalld
  ansible.builtin.debug:
    msg: "Reload time: {{ '%d-%m-%Y %H:%M:%S' | strftime }}"
  notify: reload firewalld

- name: FIREWALL | Get active firewalld service rules
  ansible.builtin.shell: set -o pipefail; /bin/firewall-cmd --list-services | sed -e 's/ /\n/g'
  args:
    executable: /bin/bash
  register: active_services
  changed_when: false
  tags:
    - firewalld
    - firewalld_config

- name: FIREWALL | Debug active firewalld service rules
  debug:
    var: active_services.stdout_lines

- name: FIREWALL | Get active firewalld port rules
  ansible.builtin.shell: set -o pipefail; /bin/firewall-cmd --list-ports | sed -e 's/ /\n/g'
  args:
    executable: /bin/bash
  register: active_ports
  changed_when: false
  tags:
    - firewalld
    - firewalld_config

- name: FIREWALL | Debug active firewalld port rules
  debug:
    var: active_ports.stdout_lines
