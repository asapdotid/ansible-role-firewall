# {{ ansible_managed }}

{# PREROUTING rules #}
{% if firewall_nat_rules is defined and firewall_nat_rules | length != 0 %}
*nat
:PREROUTING ACCEPT [0:0]
:OUTPUT ACCEPT [0:0]
:POSTROUTING ACCEPT [0:0]
{% for item in firewall_nat_rules %}
-I PREROUTING -p {{ item.protocol }} --dport {{ item.original_port }} -j REDIRECT --to-port {{ item.translated_port }}
{% endfor %}
COMMIT
{% endif %}

{# Default rules #}
*filter
{% if firewall_default_drop or firewall_strict %}
:INPUT DROP [0:0]
:FORWARD DROP [0:0]
{% else %}
:INPUT ACCEPT [0:0]
:FORWARD ACCEPT [0:0]
{% endif %}
:OUTPUT ACCEPT [0:0]

{# Allow established connections and traffic to loopback interface #}
-A INPUT -i lo -j ACCEPT
-A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT

{# Open TCP Ports #}
{%- for port in firewall_allowed_tcp_ports %}
-A INPUT -p tcp -m state --state NEW -m tcp --dport {{ port }} -j ACCEPT
{% endfor -%}

{# Open UDP Ports#}
{%- for port in firewall_allowed_udp_ports %}
-A INPUT -p udp -m state --state NEW -m udp --dport {{ port }} -j ACCEPT
{% endfor -%}

{# Open certain ports to IPs or Subnets#}
{%- for item in firewall_rich_rules %}
-A INPUT -s {{ item.source }} -p {{ item.protocol }} -m {{ item.protocol }} --dport {{ item.dest_port }}
{%- if item.new is defined and item.new %}
 -m state --state NEW
{%- endif %} -j ACCEPT
{% endfor -%}

{# Custom rules #}
{%- for rule in firewall_custom_iptables_rules %}
{{ rule }}
{% endfor -%}

{%- if firewall_strict %}
{# Only allow certain ICMP echo requests and drop ICMP timestamp requests #}
-A INPUT -p icmp --icmp-type echo-request -j ACCEPT
-A INPUT -p icmp --icmp-type timestamp-request -j DROP
-A INPUT -p icmp --icmp-type timestamp-reply -j DROP
{% elif firewall_allow_icmp %}
{# Allow all ICMP traffic #}
-A INPUT -p icmp --icmp-type any -j ACCEPT
{% endif -%}

{# Send a response if the packet is not allowed by any rules #}
-A INPUT -j REJECT --reject-with icmp-host-prohibited
-A FORWARD -j REJECT --reject-with icmp-host-prohibited
COMMIT
